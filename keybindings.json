// Place your key bindings in this file to overwrite the defaults
[
    { "key": "`",                "command": "workbench.action.gotoLine" },
    { "key": "ctrl+shift+d",          "command": "editor.action.deleteLines"},
    { "key": "ctrl+right", "command": "cursorWordPartRight", "when": "textInputFocus" },
    { "key": "ctrl+left", "command": "cursorWordPartLeft", "when": "textInputFocus" },
    { "key": "ctrl+delete", "command": "deleteWordPartRight", "when": "textInputFocus" },
    { "key": "ctrl+backspace", "command": "deleteWordPartLeft", "when": "textInputFocus" },
    { "key": "ctrl+shift+right", "command": "cursorWordPartRightSelect", "when": "textInputFocus" },
    { "key": "ctrl+shift+left", "command": "cursorWordPartLeftSelect", "when": "textInputFocus" },

    // The advantage to using moveSelectionToNextFindMatch instead of nextMatchFindAction previousMatchFindAction
    // is that moveSelectionToNextFindMatch will not open the find dialog when used, and will preserve if we are looking for whole word
    // or just the word part.
    // HOLD ON! There is a downside to using moveSelectionToNextFindMatch over nextMatchFindAction.
    // If I press ctrl+d to highlight a word and then use moveSelectionToNextFindMatch, then I unselect and use
    // moveSelectionToNextFindMatch again, it will not remember the last search term! If I use nextMatchFindAction
    // it will remember the last search term.
    // { "key": "ctrl+shift+s", "command": "editor.action.moveSelectionToNextFindMatch", "when": "editorFocus" },
    // { "key": "ctrl+shift+a", "command": "editor.action.moveSelectionToPreviousFindMatch", "when": "editorFocus" },
    { "key": "ctrl+shift+s", "command": "editor.action.nextMatchFindAction", "when": "editorFocus" },
    { "key": "ctrl+shift+a", "command": "editor.action.previousMatchFindAction", "when": "editorFocus" },


    // this needs to be added in a second time to override the second mapping of ctrl+w to 
    // workbench.action.closeGroup in the default keybindings (ctrl+w is mapped twice in the default key bindings)
    // see arnavion comment in this thread https://github.com/Microsoft/vscode/issues/25536
    { "key": "ctrl+w", "command": "workbench.action.closeActiveEditor" },

    // this will just close files and not editor groups. By default ctrl+shift+w is set to close the whole app!
    { "key": "ctrl+shift+w", "command": "workbench.action.closeAllEditors" },

    { "key": "ctrl+alt+p",                "command": "workbench.action.openRecent" },

    { "key": "ctrl+k ctrl+l",          "command": "editor.action.fontZoomReset" },

    { "key": "alt+shift+1",                "command": "workbench.action.editorLayoutSingle" },
    { "key": "alt+shift+5",                "command": "workbench.action.editorLayoutTwoByTwoGrid" },
    { "key": "alt+shift+2",                "command": "workbench.action.editorLayoutTwoColumns" },
    { "key": "alt+shift+8",                "command": "workbench.action.editorLayoutTwoRows" },

    { "key": "escape",                "command": "workbench.action.toggleSidebarVisibility", "when": "sideBarVisible"},

    // all of these commands work to make escape key always exit the panel
    { "key": "escape", "command": "workbench.action.terminal.toggleTerminal", "when": "activePanel == 'workbench.panel.terminal'" },
    { "key": "escape", "command": "workbench.action.closePanel", "when": "activePanel == 'workbench.panel.terminal'" },
    { "key": "escape", "command": "workbench.action.closePanel", "when": "activePanel == 'workbench.panel.markers'" },
    { "key": "escape", "command": "workbench.action.closePanel", "when": "activePanel == 'workbench.panel.output'" },
    { "key": "escape", "command": "workbench.action.closePanel", "when": "activePanel == 'workbench.panel.repl'" },
    { "key": "escape", "command": "workbench.action.closePanel", "when": "activePanel == 'workbench.panel.comments'" },
    // { "key": "escape", "command": "workbench.action.closePanel", "when": "activePanel == 'workbench.panel.terminal'" }, does not really work

    // just swapped these shortcuts from the defaults
    { "key": "ctrl+shift+pagedown",        "command": "workbench.action.moveEditorToNextGroup" },
    { "key": "ctrl+shift+pageup",         "command": "workbench.action.moveEditorToPreviousGroup" },
    { "key": "ctrl+alt+pageup",     "command": "workbench.action.moveEditorLeftInGroup" },
    { "key": "ctrl+alt+pagedown",   "command": "workbench.action.moveEditorRightInGroup" },

    { "key": "ctrl+shift+up",              "command": "editor.action.moveLinesUpAction", "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+down",              "command": "editor.action.moveLinesDownAction", "when": "editorTextFocus && !editorReadonly" },


    // these selection commands requires extension "Quick and Simple Text selection"
    { "key": "ctrl+shift+m",              "command": "extension.selectParenthesis", "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+,",              "command": "extension.selectEitherQuote", "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+.",              "command": "extension.selectSquareBrackets", "when": "editorTextFocus && !editorReadonly" },

    // matches sublimes goto symbol
    { "key": "ctrl+r",          "command": "workbench.action.gotoSymbol" },

    // toggle this ugly bar off. eventually when I know all the shortcuts 
    // by default, I will use workbench.activityBar.visible in settings to turn off permanently
    { "key": "ctrl+k ctrl+b", "command": "workbench.action.toggleActivityBarVisibility" },

    { "key": "ctrl+alt+o","command": "revealFileInOS" },
    { "key": "ctrl+alt+e","command": "revealInExplorer" },

    { "key": "ctrl+l", "command": "cursorRight", "when": "textInputFocus" },
    { "key": "ctrl+;", "command": "cursorEnd", "when": "textInputFocus" },

    { "key": "ctrl+n", "command": "-workbench.action.files.newUntitledFile" },
    { "key": "ctrl+n", "command": "workbench.action.files.newUntitledFile" , "when": "!filesExplorerFocus" },
    { "key": "ctrl+n", "command": "explorer.newFile" , "when": "filesExplorerFocus" },

    // this needs to be remapped because linux hijacks the default mapping of ctrl+shift+e
    { "key": "ctrl+shift+x",          "command": "workbench.view.explorer" },

    { "key": "ctrl+alt+o",            "command": "revealFileInOS","when": "!editorFocus" },

    // this requires Bookmarks plugin by Alessandro Fragnani
    { "key": "ctrl+f2",            "command": "bookmarks.toggle", "when": "editorTextFocus" },
    { "key": "f2",            "command": "bookmarks.jumpToNext","when": "editorTextFocus" },

    { "key": "f1",          "command": "workbench.actions.view.problems" },

    { "key": "ctrl+shift+b","command": "workbench.action.tasks.runTask"},
    {"key": "ctrl+k ctrl+1","command": "search.action.collapseSearchResults"},

    // remap this from the default ctrl+, combo, as I like to use that for hide tabs (at least in sublim)
    { "key": "ctrl+k ctrl+,", "command": "workbench.action.openSettings" },

    // unmap this because they get in the way of my clumsy fingers. I would never want to be able to scale the UI
    // so frequently that I would need a keyboard shortcut for it anyways
    { "key": "ctrl+=",                "command": "-workbench.action.zoomIn" },
    { "key": "ctrl+-",                "command": "-workbench.action.zoomOut" },

    // move by 3 lines at once
    {
        "key": "ctrl+up",
        "command": "cursorMove",
        "args": {
            "to": "up",
            "by": "line",
            "value": 3
        },
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+down",
        "command": "cursorMove",
        "args": {
            "to": "down",
            "by": "line",
            "value": 3
        },
        "when": "editorTextFocus"
    },

    { "key": "alt+m", "command": "workbench.action.toggleMenuBar" }
]